# This is a basic workflow that is manually triggered

name: Release start

on:
  workflow_dispatch:
    inputs:
      release_version_name:
        description: 'New release version name'
        required: true
        type: string

      development_version_name:
        description: 'Development version name'
        required: true
        type: string

jobs:
  create_branch:
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: ${{ inputs.release_version_name }}
      RELEASE_BRANCH: 'release/${{ inputs.release_version_name }}'
      TEMP_RELEASE_BRANCH: 'tmp_release/${{ inputs.release_version_name }}'

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.DHIS2_BOT_GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12.1

      # Creates an auxiliary branch. This branch will be used to create the signed commit using the GH API.
      # It is required to use an auxiliary branch because the RELEASE_BRANCH is protected and the GH API
      # rejects the commit even though the user identified by the token is included in the bypass list.
    - name: Create auxiliary branch
      run: |
        git checkout -b ${{ env.TEMP_RELEASE_BRANCH }}
        git push origin ${{ env.TEMP_RELEASE_BRANCH }}

    - name: Run Python script to update release branch version
      run: python scripts/updateVersionName.py ${{ env.RELEASE_VERSION }}

      # Uses the GH API to create the signed commit.
    - name: Commit and Push Changes to auxiliary branch
      uses: flex-development/gh-commit@1.0.0
      with:
        message: 'Update version to ${{ env.RELEASE_VERSION }}'
        ref: ${{ env.TEMP_RELEASE_BRANCH }}
        token: ${{ secrets.DHIS2_BOT_GITHUB_TOKEN }}

      # Fetch the remote commit (signed commit) and create a new branch with the RELEASE_BRANCH name.
      # This is required because the RELEASE_BRANCH is protected.
    - name: Create and push release branch
      run: |
        git reset --hard
        git pull origin ${{ env.TEMP_RELEASE_BRANCH }}
        git checkout -b ${{ env.RELEASE_BRANCH }}
        git push origin ${{ env.RELEASE_BRANCH }}
        git push origin --delete ${{ env.TEMP_RELEASE_BRANCH }}

  update_version:
    runs-on: ubuntu-latest
    env:
      DEVELOPMENT_VERSION: ${{ inputs.development_version_name }}
      DEVELOPMENT_BRANCH: 'update_version_to${{ inputs.development_version_name }}'

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DHIS2_BOT_GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.1

      - name: Create development branch
        run: |
          git checkout -b ${{ env.DEVELOPMENT_BRANCH }}
          git push origin ${{ env.DEVELOPMENT_BRANCH }}

      - name: Run Python script to update base branch version
        run: python scripts/updateVersionName.py ${{ env.DEVELOPMENT_VERSION }}

      - name: Commit and Push Changes
        uses: flex-development/gh-commit@1.0.0
        with:
          message: 'Update version to ${{ env.DEVELOPMENT_VERSION }}'
          ref: ${{ env.DEVELOPMENT_BRANCH }}
          token: ${{ secrets.DHIS2_BOT_GITHUB_TOKEN }}

      - name: Create pull request
        run: gh pr create -B develop -H update_version_to${{ env.DEVELOPMENT_VERSION }} --title 'Merge ${{ env.DEVELOPMENT_BRANCH }} into develop' --body 'Created by Github action'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
