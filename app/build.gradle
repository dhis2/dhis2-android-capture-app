apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: "$project.rootDir/jacoco/jacoco.gradle"
apply plugin: "kotlinx-serialization"
apply plugin: "dagger.hilt.android.plugin"

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
}

android {

    def getBuildDate = {
        return new Date().format("yyyy-MM-dd HH:mm")
    }

    def getCommitHash = {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        animationsDisabled = true
    }

    sourceSets {
        androidTest {
            java.srcDirs = ['src/androidTest/java']
            resources.srcDirs = ['src/androidTest/java']
        }
    }


    ndkVersion versions.ndk
    compileSdkVersion versions.sdk

    namespace "org.dhis2"
    testNamespace "org.dhis2.test"

    defaultConfig {
        applicationId "com.dhis2"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.sdk
        versionCode versions.vCode
        versionName versions.vName
        testInstrumentationRunner "org.dhis2.Dhis2Runner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        setProperty("archivesBaseName", "dhis2-v" + versions.vName)

        def mapboxAccessToken = System.getenv("MAPBOX_ACCESS_TOKEN") != null ? System.getenv("MAPBOX_ACCESS_TOKEN") : "pk.eyJ1IjoiZGhpczJhbmRyb2lkIiwiYSI6ImNrcWt1a2hzYzE5Ymsyb254MWtlbGt4Y28ifQ.JrP61q9BFTVEKO4SwRUwDw"
        def bitriseSentryDSN = System.getenv("SENTRY_DSN") != null ? System.getenv("SENTRY_DSN") : ""

        buildConfigField "String", "SDK_VERSION", "\"" + versions.dhis2AndroidSDK + "\""
        buildConfigField "String", "MAPBOX_ACCESS_TOKEN", "\"" + mapboxAccessToken + "\""
        buildConfigField "String", "MATOMO_URL", "\"https://usage.analytics.dhis2.org/matomo.php\""
        buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
        buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
        buildConfigField("String", "SENTRY_DSN", "\"${bitriseSentryDSN}\"")

        manifestPlaceholders = [
                appAuthRedirectScheme: ''
        ]

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        javaCompileOptions.annotationProcessorOptions.arguments['dagger.hilt.disableModulesHaveInstallInCheck'] = 'true'
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/licenses/**']
        }
        resources {
            excludes += [
                    'META-INF/LICENSE',
                    'META-INF/rxjava.properties',
                    'LICENSE.txt',
                    'META-INF/DEPENDENCIES',
                    'META-INF/ASL2.0',
                    'META-INF/NOTICE',
                    'META-INF/LICENSE',
                    'META-INF/rxjava.properties',
                    '**/attach_hotspot_windows.dll',
                    'META-INF/licenses/**',
                    'META-INF/AL2.0',
                    'META-INF/LGPL2.1',
                    'META-INF/proguard/androidx-annotations.pro',
                    'META-INF/gradle/incremental.annotation.processors'
            ]
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }


    buildTypes {

        debug {
            // custom application suffix which allows to
            // install debug and release builds at the same time
            applicationIdSuffix = ".debug"

            // Using dataentry.jks to sign debug build type.
            signingConfig = signingConfigs.debug

            buildConfigField "int", "MATOMO_ID", "2"
            buildConfigField "String", "BUILD_DATE", "\"" + getBuildDate() + "\""
            buildConfigField "String", "GIT_SHA", "\"" + getCommitHash() + "\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "int", "MATOMO_ID", "1"
            buildConfigField "String", "BUILD_DATE", "\"" + getBuildDate() + "\""
            buildConfigField "String", "GIT_SHA", "\"" + getCommitHash() + "\""
        }
    }

    flavorDimensions "default"

    productFlavors {
        dhis {
            applicationId "com.dhis2"
            dimension "default"
            versionCode versions.vCode
            versionName versions.vName
        }

        dhisPlayServices {
            applicationId "com.dhis2"
            dimension "default"
            versionCode versions.vCode
            versionName versions.vName
        }

        dhisUITesting {
            applicationId "com.dhis2"
            dimension "default"
            versionCode versions.vCode
            versionName versions.vName
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        targetCompatibility versions.targetCompat
        sourceCompatibility versions.sourceCompat
    }

    buildFeatures {
        compose true
        dataBinding true
        viewBinding true
    }


    configurations.all {
        resolutionStrategy {
            preferProjectModules()

            force 'junit:junit:4.12', 'com.squareup.okhttp3:okhttp:3.12.0'
            forcedModules = ['com.squareup.okhttp3:okhttp:3.12.0']
        }
    }

    kotlinOptions {
        jvmTarget = versions.targetCompat
    }

    composeOptions {
        kotlinCompilerExtensionVersion = versions.kotlinCompilerExtensionVersion
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':viewpagerdotsindicator')
    implementation project(":dhis_android_analytics")
    implementation project(":form")
    implementation project(":commons")
    implementation project(":dhis2_android_maps")
    implementation project(":compose-table")
    implementation project(':stock-usecase')

    implementation lib.security.conscrypt
    implementation lib.security.rootDetector
    implementation lib.security.openId
    coreLibraryDesugaring lib.android.desugar
    implementation lib.kotlin.serialization
    implementation lib.androidx.activityCompose
    implementation lib.androidx.annotation
    implementation lib.androidx.cardView
    implementation lib.androidx.legacySupport
    implementation lib.androidx.multidex
    implementation lib.androidx.constraintLayout
    implementation lib.androidx.work
    implementation lib.androidx.workRx
    implementation lib.androidx.exifinterface
    dhisPlayServicesImplementation lib.google.auth
    dhisPlayServicesImplementation lib.google.authApiPhone
    implementation lib.google.flexbox
    implementation lib.google.guava
    implementation lib.github.pinlock
    implementation lib.github.fancyshowcase
    implementation lib.animation.lottie
    kapt lib.dagger.daggerCompiler
    implementation lib.dagger.hilt
    kapt lib.dagger.hiltAndroidCompiler
    kapt lib.dagger.hiltCompiler
    implementation lib.rx.rxKotlin
    implementation lib.network.gsonConverter
    implementation lib.network.okhttp
    implementation lib.dates.jodatime
    kapt lib.deprecated.autoValueParcel
    implementation lib.analytics.matomo
    debugImplementation lib.analytics.flipper
    debugImplementation lib.analytics.soloader
    debugImplementation lib.analytics.flipperNetwork
    debugImplementation lib.analytics.flipperLeak
    debugImplementation lib.analytics.leakcanary
    releaseImplementation lib.analytics.leakcanaryNoop
    releaseImplementation lib.analytics.flipperNoop
    implementation lib.analytics.rxlint
    implementation lib.analytics.crashActivity
    testImplementation lib.test.archCoreTesting
    testImplementation lib.test.testCore
    testImplementation lib.test.mockitoCore
    testImplementation lib.test.mockitoInline
    testImplementation lib.test.mockitoKotlin
    testImplementation lib.test.truth
    androidTestUtil lib.test.orchestrator
    androidTestImplementation lib.test.testRunner
    androidTestImplementation lib.test.espressoIntents
    androidTestImplementation lib.test.espressoContrib
    androidTestImplementation lib.test.espressoAccessibility
    androidTestImplementation lib.test.espressoWeb
    androidTestImplementation lib.test.uiAutomator
    androidTestImplementation lib.test.testCore
    androidTestImplementation lib.test.testRules
    androidTestImplementation lib.test.testCoreKtx
    androidTestImplementation lib.test.testJUnitKtx
    androidTestImplementation lib.test.mockitoAndroid
    androidTestImplementation lib.test.mockitoCore
    androidTestImplementation lib.test.supportAnnotations
    androidTestImplementation lib.test.espressoIdlingResource
    androidTestImplementation lib.test.rxIdler
    testImplementation lib.test.kotlinCoroutines
    androidTestImplementation lib.test.composeUiTestJUnit
    debugImplementation lib.test.composeUiTestManifest
    androidTestImplementation lib.test.hamcrest
    implementation(platform(lib.dispatcher.dispatchBOM))
    implementation(lib.dispatcher.dispatchCore)
    androidTestImplementation(lib.dispatcher.dispatchEspresso)
    testImplementation lib.test.turbine
}
