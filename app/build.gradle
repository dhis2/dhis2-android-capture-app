apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'hu.supercluster.paperwork'
apply plugin: 'jacoco'
apply from: "$project.rootDir/jacoco/jacoco.gradle"
apply plugin: "kotlinx-serialization"

def libraries = rootProject.ext.libraries
def versions = rootProject.ext.versions

sonarqube {
    properties {
        property 'sonar.coverage.jacoco.xmlReportPaths', "${project.buildDir}/coverage-report/jacocoTestReport.xml"
    }
}

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
}

paperwork {
    set = [
            buildTime: buildTime("yyyy-MM-dd HH:mm"),
            gitSha   : gitSha()
    ]
}

android {
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        animationsDisabled = true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    ndkVersion versions.ndk
    compileSdkVersion versions.sdk
    buildToolsVersion versions.tools

    defaultConfig {
        applicationId "com.dhis2"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.sdk
        versionCode versions.vCode
        versionName versions.vName
        testInstrumentationRunner "org.dhis2.Dhis2Runner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        setProperty("archivesBaseName", "dhis2-v" + versions.vName)

        def mapboxAccessToken = System.getenv("MAPBOX_ACCESS_TOKEN") != null ? System.getenv("MAPBOX_ACCESS_TOKEN") : "pk.eyJ1IjoiZGhpczJhbmRyb2lkIiwiYSI6ImNrcWt1a2hzYzE5Ymsyb254MWtlbGt4Y28ifQ.JrP61q9BFTVEKO4SwRUwDw"

        buildConfigField "String", "SDK_VERSION", "\"" + libraries.dhis2sdk + "\""
        buildConfigField "String", "MAPBOX_ACCESS_TOKEN", "\"" + mapboxAccessToken + "\""
        buildConfigField "String", "MATOMO_URL", "\"https://usage.analytics.dhis2.org/matomo.php\""
        buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
        buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")

        manifestPlaceholders = [
                appAuthRedirectScheme: ''
        ]

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        // excluding duplicate license files
        // from jackson modules
        exclude "META-INF/LICENSE"

        // excluding duplicate rxjava properties file
        // see https://github.com/ReactiveX/RxJava/issues/4445#issuecomment-243591879
        exclude 'META-INF/rxjava.properties'
    }

    buildTypes {

        def bitriseSentryDSN = System.getenv("SENTRY_DSN") != null ? System.getenv("SENTRY_DSN") : ""

        debug {
            // custom application suffix which allows to
            // install debug and release builds at the same time
            applicationIdSuffix = ".debug"

            // jacoco test coverage reports both for
            // androidTest and test source sets
            testCoverageEnabled = false

            // Using dataentry.jks to sign debug build type.
            signingConfig = signingConfigs.debug

            buildConfigField "int", "MATOMO_ID", "2"

            applicationVariants.all { variant ->
                if (variant.getFlavorName() == "dhisUITesting") {
                    bitriseSentryDSN = ""
                }
            }

            //Sentry variables
            manifestPlaceholders = [
                    sentry_dsn        : bitriseSentryDSN,
                    sentry_environment: "debug",
                    sentry_debug      : "true",
                    sentry_sample_rate: "1.0"
            ]
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "int", "MATOMO_ID", "1"

            //Sentry variables
            manifestPlaceholders = [
                    sentry_dsn        : bitriseSentryDSN,
                    sentry_environment: "production",
                    sentry_debug      : "false",
                    sentry_sample_rate: "0.1"
            ]
        }
    }

    flavorDimensions "default"

    productFlavors {
        dhis {
            applicationId "com.dhis2"
            dimension "default"
            versionCode versions.vCode
            versionName versions.vName
        }

        dhisPlayServices {
            applicationId "com.dhis2"
            dimension "default"
            versionCode versions.vCode
            versionName versions.vName
        }

        dhisUITesting {
            applicationId "com.dhis2"
            dimension "default"
            versionCode versions.vCode
            versionName versions.vName
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        targetCompatibility = JavaVersion.VERSION_1_8
        sourceCompatibility = JavaVersion.VERSION_1_8
    }

    buildFeatures {
        compose true
        dataBinding true
        viewBinding true
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    configurations.all {
        resolutionStrategy {
            preferProjectModules()

            force 'junit:junit:4.12', 'com.squareup.okhttp3:okhttp:3.12.0'
            forcedModules = ['com.squareup.okhttp3:okhttp:3.12.0']
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.3.0"
    }
}

dependencies {
    implementation "androidx.activity:activity-compose:${libraries.activityCompose}"

    implementation project(':viewpagerdotsindicator')
    implementation project(":dhis_android_analytics")
    implementation project(":form")
    implementation project(":commons")
    implementation project(":dhis2_android_maps")
    implementation project(":compose-table")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    kapt "org.jetbrains.kotlinx:kotlinx-metadata-jvm:${libraries.kotlinmetadata}"

    implementation "androidx.annotation:annotation:${libraries.annotation}"
    implementation "androidx.cardview:cardview:${libraries.cardview}"
    implementation "androidx.legacy:legacy-support-v4:${libraries.legacysupport}"
    implementation "androidx.multidex:multidex:${libraries.multidex}"
    implementation "androidx.constraintlayout:constraintlayout:${libraries.constraintlayout}"
    implementation "androidx.work:work-runtime:${libraries.work}"
    implementation "androidx.work:work-rxjava2:${libraries.work}"
    implementation "androidx.exifinterface:exifinterface:${libraries.exif}"

    //region UI LIBRARIES
    //Google
    implementation "com.google.android.flexbox:flexbox:${libraries.flexbox}"

    //AndroidTreeView
    implementation "com.github.bmelnychuk:atv:${libraries.atv}"

    //PIN LOCK
    implementation "com.github.aritraroy:PinLockView:${libraries.pinlock}"

    //FancyShowCase
    implementation "com.github.faruktoptas:FancyShowCaseView:${libraries.fancyshowcase}"

    //Lottie animations
    implementation "com.airbnb.android:lottie:${libraries.lottie}"
    //endregion

    //region DEPENDENCY INJECTION
    kapt "com.google.dagger:dagger-compiler:${libraries.dagger}"

    //region RXJAVA
    implementation "com.github.akarnokd:rxjava2-interop:${libraries.rxjavainteroperop}"
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'

    //endregion

    // Extension which generates mappers for work with cursors
    kapt "com.gabrielittner.auto.value:auto-value-cursor:${libraries.autovaluecursor}"
    kapt "com.ryanharter.auto.value:auto-value-parcel:${libraries.autovalueparcel}"
    //endregion

    //region Analytics
    implementation "com.github.matomo-org:matomo-sdk-android:${libraries.matomo}"
    //endregion

    //region Debug
    //Flipper
    debugImplementation "com.facebook.flipper:flipper:${libraries.flipper}"
    debugImplementation "com.facebook.soloader:soloader:${libraries.soloader}"
    debugImplementation "com.facebook.flipper:flipper-network-plugin:${libraries.flippernetwork}"
    debugImplementation "com.facebook.flipper:flipper-leakcanary-plugin:${libraries.flipperleak}"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${libraries.leakcannary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcannarynoop}"
    releaseImplementation "com.facebook.flipper:flipper-noop:${libraries.flippernoop}"
    //RXLint
    implementation "nl.littlerobots.rxlint:rxlint:${libraries.rxlint}"
    implementation "hu.supercluster:paperwork:${libraries.paperwork}"
    implementation "cat.ereza:customactivityoncrash:${libraries.crashactivity}"
    //endregion

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:${libraries.desugar_jdk_libs}"
    //endregion

    //region Security
    implementation "co.infinum:goldfinger-rx:${libraries.goldfinger}"
    implementation "com.scottyab:rootbeer-lib:${libraries.root}"
    implementation "net.openid:appauth:${libraries.openid}"
    //endregion

    //region Other
    implementation "com.squareup.retrofit2:converter-gson:${libraries.gsonconverter}"
    implementation "com.squareup.okhttp3:okhttp:${libraries.okhttp}"
    implementation "joda-time:joda-time:${libraries.jodatime}"
    implementation "com.google.guava:guava:${libraries.guava}"
    //endregion

    //region Test
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "androidx.test:core:$libraries.androidx_test"

    testImplementation "org.mockito:mockito-core:$libraries.mockito"
    testImplementation "org.mockito:mockito-inline:$libraries.mockito_inline"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$libraries.mockito_kotlin"
    testImplementation "com.google.truth:truth:$libraries.google_truth"

    implementation(platform("com.rickbusarow.dispatch:dispatch-bom:1.0.0-beta10"))
    implementation("com.rickbusarow.dispatch:dispatch-core")

    androidTestImplementation("com.rickbusarow.dispatch:dispatch-android-espresso:1.0.0-beta10")

    androidTestUtil 'androidx.test:orchestrator:1.4.1'
    androidTestImplementation "androidx.test:runner:$libraries.androidx_test"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$libraries.espresso_core"

    androidTestImplementation "androidx.test.espresso:espresso-contrib:$libraries.espresso_core"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$libraries.espresso_core"
    androidTestImplementation "androidx.test.espresso:espresso-web:$libraries.espresso_core"
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation "androidx.test:core:$libraries.androidx_test"
    androidTestImplementation "androidx.test:rules:$libraries.androidx_test"
    androidTestImplementation "androidx.test:core-ktx:$libraries.androidx_test"
    androidTestImplementation "androidx.test.ext:junit-ktx:$libraries.junit_ext"
    androidTestImplementation "org.mockito:mockito-android:$libraries.mockito_android"
    androidTestImplementation "org.mockito:mockito-core:$libraries.mockito"
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'
    androidTestImplementation 'com.squareup.rx.idler:rx2-idler:0.11.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$libraries.kotlinxcoroutines"
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:$libraries.compose_ui_test")
    debugImplementation("androidx.compose.ui:ui-test-manifest:$libraries.compose_ui_test")
    androidTestImplementation "org.hamcrest:hamcrest:$libraries.hamcrest"
    //endregion

    //Serialization library
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${libraries.kotlinxserialization}"

    dhisPlayServicesImplementation("com.google.android.gms:play-services-auth:20.2.0")
    dhisPlayServicesImplementation("com.google.android.gms:play-services-auth-api-phone:18.0.1")

    //Conscrypt
    implementation "org.conscrypt:conscrypt-android:${libraries.conscrypt}"
}