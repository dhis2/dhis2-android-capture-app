plugins {
    id 'com.autonomousapps.dependency-analysis' version "1.19.0"
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: "$project.rootDir/jacoco/jacoco.gradle"
apply plugin: "kotlinx-serialization"
apply plugin: "dagger.hilt.android.plugin"

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
}

android {

    def getBuildDate = {
        return new Date().format("yyyy-MM-dd HH:mm")
    }

    def getCommitHash = {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        animationsDisabled = true
    }

    sourceSets {
        androidTest {
            java.srcDirs = ['src/androidTest/java']
            resources.srcDirs = ['src/androidTest/java']
        }
    }


    ndkVersion versions.ndk
    compileSdkVersion versions.sdk

    namespace "org.dhis2"
    testNamespace "org.dhis2.test"

    defaultConfig {
        applicationId "com.dhis2"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.sdk
        versionCode versions.vCode
        versionName versions.vName
        testInstrumentationRunner "org.dhis2.Dhis2Runner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        setProperty("archivesBaseName", "dhis2-v" + versions.vName)

        def mapboxAccessToken = System.getenv("MAPBOX_ACCESS_TOKEN") != null ? System.getenv("MAPBOX_ACCESS_TOKEN") : "pk.eyJ1IjoiZGhpczJhbmRyb2lkIiwiYSI6ImNrcWt1a2hzYzE5Ymsyb254MWtlbGt4Y28ifQ.JrP61q9BFTVEKO4SwRUwDw"
        def bitriseSentryDSN = System.getenv("SENTRY_DSN") != null ? System.getenv("SENTRY_DSN") : ""

        buildConfigField "String", "SDK_VERSION", "\"" + versions.dhis2AndroidSDK + "\""
        buildConfigField "String", "MAPBOX_ACCESS_TOKEN", "\"" + mapboxAccessToken + "\""
        buildConfigField "String", "MATOMO_URL", "\"https://usage.analytics.dhis2.org/matomo.php\""
        buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
        buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
        buildConfigField("String", "SENTRY_DSN", "\"${bitriseSentryDSN}\"")

        manifestPlaceholders = [
                appAuthRedirectScheme: ''
        ]

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        javaCompileOptions.annotationProcessorOptions.arguments['dagger.hilt.disableModulesHaveInstallInCheck'] = 'true'
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/licenses/**']
        }
        resources {
            excludes += [
                    'META-INF/LICENSE',
                    'META-INF/rxjava.properties',
                    'LICENSE.txt',
                    'META-INF/DEPENDENCIES',
                    'META-INF/ASL2.0',
                    'META-INF/NOTICE',
                    'META-INF/LICENSE',
                    'META-INF/rxjava.properties',
                    '**/attach_hotspot_windows.dll',
                    'META-INF/licenses/**',
                    'META-INF/AL2.0',
                    'META-INF/LGPL2.1',
                    'META-INF/proguard/androidx-annotations.pro',
                    'META-INF/gradle/incremental.annotation.processors'
            ]
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }


    buildTypes {

        debug {
            // custom application suffix which allows to
            // install debug and release builds at the same time
            applicationIdSuffix = ".debug"

            // Using dataentry.jks to sign debug build type.
            signingConfig = signingConfigs.debug

            buildConfigField "int", "MATOMO_ID", "2"
            buildConfigField "String", "BUILD_DATE", "\"" + getBuildDate() + "\""
            buildConfigField "String", "GIT_SHA", "\"" + getCommitHash() + "\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "int", "MATOMO_ID", "1"
            buildConfigField "String", "BUILD_DATE", "\"" + getBuildDate() + "\""
            buildConfigField "String", "GIT_SHA", "\"" + getCommitHash() + "\""
        }
    }

    flavorDimensions "default"

    productFlavors {
        dhis {
            applicationId "com.dhis2"
            dimension "default"
            versionCode versions.vCode
            versionName versions.vName
        }

        dhisPlayServices {
            applicationId "com.dhis2"
            dimension "default"
            versionCode versions.vCode
            versionName versions.vName
        }

        dhisUITesting {
            applicationId "com.dhis2"
            dimension "default"
            versionCode versions.vCode
            versionName versions.vName
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        targetCompatibility versions.targetCompat
        sourceCompatibility versions.sourceCompat
    }

    buildFeatures {
        compose true
        dataBinding true
        viewBinding true
    }


    configurations.all {
        resolutionStrategy {
            preferProjectModules()

            force 'junit:junit:4.12', 'com.squareup.okhttp3:okhttp:3.12.0'
            forcedModules = ['com.squareup.okhttp3:okhttp:3.12.0']
        }
    }

    kotlinOptions {
        jvmTarget = versions.targetCompat
    }

    composeOptions {
        kotlinCompilerExtensionVersion = versions.kotlinCompilerExtensionVersion
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':viewpagerdotsindicator')
    implementation project(":dhis_android_analytics")
    implementation project(":form")
    implementation project(":commons")
    implementation project(":dhis2_android_maps")
    implementation project(":compose-table")
    implementation project(':stock-usecase')

    implementation libs.security.conscrypt
    implementation libs.security.rootDetector
    implementation libs.security.openId
    coreLibraryDesugaring libs.android.desugar
    implementation libs.kotlin.serialization
    implementation libs.androidx.activityCompose
    implementation libs.androidx.annotation
    implementation libs.androidx.cardView
    implementation libs.androidx.legacySupport
    implementation libs.androidx.multidex
    implementation libs.androidx.constraintLayout
    implementation libs.androidx.work
    implementation libs.androidx.workRx
    implementation libs.androidx.exifinterface
    dhisPlayServicesImplementation libs.google.auth
    dhisPlayServicesImplementation libs.google.authApiPhone
    implementation libs.google.flexbox
    implementation libs.google.guava
    implementation libs.github.pinlock
    implementation libs.github.fancyshowcase
    implementation libs.animation.lottie
    kapt libs.dagger.daggerCompiler
    implementation libs.dagger.hilt
    kapt libs.dagger.hiltAndroidCompiler
    kapt libs.dagger.hiltCompiler
    implementation libs.rx.rxKotlin
    implementation libs.network.gsonConverter
    implementation libs.network.okhttp
    implementation libs.dates.jodatime
    kapt libs.deprecated.autoValueParcel
    implementation libs.analytics.matomo
    debugImplementation libs.analytics.flipper
    debugImplementation libs.analytics.soloader
    debugImplementation libs.analytics.flipperNetwork
    debugImplementation libs.analytics.flipperLeak
    debugImplementation libs.analytics.leakcanary
    releaseImplementation libs.analytics.leakcanaryNoop
    releaseImplementation libs.analytics.flipperNoop
    implementation libs.analytics.rxlint
    implementation libs.analytics.crashActivity
    testImplementation libs.test.archCoreTesting
    testImplementation libs.test.testCore
    testImplementation libs.test.mockitoCore
    testImplementation libs.test.mockitoInline
    testImplementation libs.test.mockitoKotlin
    testImplementation libs.test.truth
    androidTestUtil libs.test.orchestrator
    androidTestImplementation libs.test.testRunner
    androidTestImplementation libs.test.espressoIntents
    androidTestImplementation libs.test.espressoContrib
    androidTestImplementation libs.test.espressoAccessibility
    androidTestImplementation libs.test.espressoWeb
    androidTestImplementation libs.test.uiAutomator
    androidTestImplementation libs.test.testCore
    androidTestImplementation libs.test.testRules
    androidTestImplementation libs.test.testCoreKtx
    androidTestImplementation libs.test.testJUnitKtx
    androidTestImplementation libs.test.mockitoAndroid
    androidTestImplementation libs.test.mockitoCore
    androidTestImplementation libs.test.supportAnnotations
    androidTestImplementation libs.test.espressoIdlingResource
    androidTestImplementation libs.test.rxIdler
    testImplementation libs.test.kotlinCoroutines
    androidTestImplementation libs.test.composeUiTestJUnit
    debugImplementation libs.test.composeUiTestManifest
    androidTestImplementation libs.test.hamcrest
    implementation(platform(libs.dispatcher.dispatchBOM))
    implementation(libs.dispatcher.dispatchCore)
    androidTestImplementation(libs.dispatcher.dispatchEspresso)
    testImplementation libs.test.turbine
}
