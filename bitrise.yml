---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: android
app:
  envs:
  - PROJECT_LOCATION: BITRISE_SOURCE_DIR
    opts:
      is_expand: false
  - MODULE: app
    opts:
      is_expand: false
  - VARIANT: dhisDebug
meta:
  bitrise.io:
    machine_type: performance
trigger_map:
- push_branch: master
  workflow: primary
- push_branch: develop
  workflow: primary
- push_branch: hotfix/2.4.2
  workflow: primary
- push_branch: release/2.7.0
  workflow: primary
- pull_request_target_branch: "*"
  workflow: PullRequest
workflows:
  BuildSignReleaseAPKs:
    envs:
    - GITHUB_RELEASES_LIST: https://github.com/dhis2/dhis2-android-capture-app/releases
      opts:
        is_expand: false
    - GITHUB_RELEASE_BRANCH: master
      opts:
        is_expand: false
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone: {}
    - cache-pull: {}
    - script:
        title: Rule engine build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd dhis2-rule-engine

            FILE=build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE rule engine exist"
                exit 0
            fi

            echo "apply plugin: 'java'

            dependencies {

                testImplementation 'junit:junit:4.12'
                testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
                testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.2.9'
                testCompile 'com.google.truth:truth:0.30'
                testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'

                implementation 'com.google.code.findbugs:jsr305:3.0.1'
                compileOnly 'com.google.auto.value:auto-value:1.3'
                annotationProcessor 'com.google.auto.value:auto-value:1.5.2'
                compile 'com.google.guava:guava:16+'
                compile 'joda-time:joda-time:2.10.5'
                implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
                implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
                implementation group : 'org.apache.commons', name : 'commons-jexl', version: '2.1.1'
            }" > build.gradle

            cd ..
            echo "Rule engine build gradle created"
    - script:
        title: zxing build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |+
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ "$BITRISE_GIT_BRANCH" = "master" ]; then
              exit 0
            fi


            FILE=zxing-core/core/build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE exist"
                exit 0
            fi

            echo "apply plugin: 'java'" > $FILE
            echo "zxing build gradle created"



    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |-
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - gradle-runner:
        title: Build Release - Training APK
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/gradle-runner/assets/icon.svg
        inputs:
        - gradle_task: assembleRelease assembleDhisDebug
        - gradlew_path: "./gradlew"
    - sign-apk:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/sign-apk/assets/icon.svg
        inputs:
        - signer_scheme: v2
        - use_apk_signer: 'true'
        - android_app: "$BITRISE_APK_PATH_LIST"
    - deploy-to-bitrise-io:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/deploy-to-bitrise-io/assets/icon.svg
        inputs:
        - notify_user_groups: none
    - cache-push: {}
  CodeReviewReminder:
    steps:
    - nvm@1:
        inputs:
        - node_version: 17.4.0
    - npm@1:
        inputs:
        - command: install -g zx
        title: Install zx
    - script@1:
        inputs:
        - runner_bin: zx
        - script_file_path: "$TMPDIR/zx_script.mjs"
        - content: "#!/usr/bin/env zx\n\nconst pr_api = \"https://api.github.com/repos/dhis2/dhis2-android-capture-app/pulls\"\n\nconst
            pablo_pr = \"https://github.com/dhis2/dhis2-android-capture-app/pulls/review-requested/Balcan\"\nconst
            jaime_pr = \"https://github.com/dhis2/dhis2-android-capture-app/pulls/review-requested/JaimeToca\"\nconst
            ferdy_pr = \"https://github.com/dhis2/dhis2-android-capture-app/pulls/review-requested/ferdyrod\"\nconst
            andres_pr = \"https://github.com/dhis2/dhis2-android-capture-app/pulls/review-requested/andresmr\"\nconst
            manu_pr = \"https://github.com/dhis2/dhis2-android-capture-app/pulls/review-requested/mmmateos\"\n\nconsole.log(\"Counting
            code reviews\")\n\nlet response = await fetch(pr_api, {\n    method: \"get\",\n
            \   headers: {\n        \"Authorization\": `Token ${process.env.GITHUB_RELEASE_API_TOKEN}`\n
            \   }\n})\n\nif(response.ok){\n    let pull_requests = JSON.parse(await
            response.text())\n    var devs = []\n    for(var pr of pull_requests){\n
            \       var reviewers = pr[\"requested_reviewers\"]\n        for(var reviewer
            of reviewers){\n            devs.push(reviewer[\"login\"])\n        }\n
            \   }\n    var ferdyrodCount = 0\n    var BalcanCount = 0\n    var mmmateosCount
            = 0\n    var JaimeTocaCount = 0\n    var andresmrCount = 0\n    for(var
            dev of devs){\n        if(dev == \"ferdyrod\") ferdyrodCount += 1\n        if(dev
            == \"Balcan\") BalcanCount = BalcanCount +1\n        if(dev == \"mmmateos\")
            mmmateosCount = mmmateosCount +1\n        if(dev == \"JaimeToca\") JaimeTocaCount
            = JaimeTocaCount +1\n        if(dev == \"andresmr\") andresmrCount = andresmrCount
            +1\n    }\n\n    var message = \"\"\n\tif(ferdyrodCount>0) message = message
            + \"Ferdy: \" + ferdy_pr + \"\\n\"\n\tif(BalcanCount>0) message = message
            + \"Pablo: \" + pablo_pr + \"\\n\"\n\tif(mmmateosCount>0) message = message
            + \"Manu: \" + manu_pr + \"\\n\"\n\tif(JaimeTocaCount>0) message = message
            + \"Jaime: \" + jaime_pr + \"\\n\"\n\tif(andresmrCount>0) message = message
            + \"Andres: \" + andres_pr + \"\\n\"\n    \n    console.log(message)\n
            \   await $`envman add --key CODE_REVIEW_MESSAGE --value ${message}`\n}\nconsole.log(\"Finished!\")"
    - slack@3:
        inputs:
        - channel: "#android-app-dev"
        - text: "$CODE_REVIEW_MESSAGE"
        - icon_url: https://c.tenor.com/T4YneTxIzUAAAAAC/im-watching-you-eyes-on-you.gif
        - pretext: "*Code review reminder!*"
        - author_name: Watcher Cat
        - title: I'm watching you!
        - message: ''
        - webhook_url: "$SLACK_CI_WEBHOOK"
    envs:
    - CODE_REVIEW_MESSAGE: No new message
  DeployToPlayStore:
    envs:
    - GITHUB_RELEASES_LIST: https://github.com/dhis2/dhis2-android-capture-app/releases
      opts:
        is_expand: false
    - GITHUB_RELEASE_BRANCH: master
      opts:
        is_expand: false
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.1: {}
    - cache-pull: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |-
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - gradle-runner:
        title: Build Release - Training APK
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/gradle-runner/assets/icon.svg
        inputs:
        - gradle_task: assembleDhisNoSMSRelease
        - gradlew_path: "./gradlew"
    - script@1:
        title: Swap Java 8 to Java 11
        inputs:
        - content: |-
            # fail if any commands fails
            set -e
            # debug log
            set -x

            sudo update-alternatives --set javac /usr/lib/jvm/java-11-openjdk-amd64/bin/javac
            sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java
            export JAVA_HOME='/usr/lib/jvm/java-11-openjdk-amd64'
            envman add --key JAVA_HOME --value '/usr/lib/jvm/java-11-openjdk-amd64'
    - sign-apk:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/sign-apk/assets/icon.svg
        inputs:
        - signer_scheme: v2
        - verbose_log: 'true'
        - use_apk_signer: 'true'
        - android_app: "$BITRISE_APK_PATH_LIST"
    - google-play-deploy:
        inputs:
        - package_name: com.dhis2
        - app_path: "$BITRISE_SIGNED_APK_PATH"
        - service_account_json_key_path: "$BITRISEIO_GOOGLE_PLAY_JSON_URL"
        - whatsnews_dir: "./whatsnew"
    - deploy-to-bitrise-io:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/deploy-to-bitrise-io/assets/icon.svg
        inputs:
        - notify_user_groups: none
    - cache-push: {}
  DesignAPK:
    steps:
    - activate-ssh-key@4.0.5:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.1: {}
    - cache-pull: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |-
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - script:
        title: zxing build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ "$BITRISE_GIT_BRANCH" = "master_legacy" ]; then
              exit 0
            fi

            SUBMODULE=zxing-core
            if [ -d "$SUBMODULE" ]; then
              echo "$SUBMODULE exist"
              FILE=zxing-core/core/build.gradle
              if [ -f "$FILE" ]; then
                  echo "$FILE exist"
                  exit 0
              fi

              echo "apply plugin: 'java'" > $FILE
              echo "zxing build gradle created"
            fi
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - android-build:
        inputs:
        - variant: "$VARIANT"
        - module: app
    - deploy-to-bitrise-io:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/deploy-to-bitrise-io/assets/icon.svg
        inputs:
        - notify_user_groups: none
    - create-install-page-qr-code@1.0.0: {}
    - slack@3.1.3:
        is_always_run: false
        run_if: '{{getenv "SLACK" | ne "no"}}'
        inputs:
        - channel: "@U9LUWRXCH"
        - emoji: ":white_check_mark:"
        - from_username: CI Test Deployment
        - pretext: ''
        - buttons: 'Bitrise apk|${BITRISE_PUBLIC_INSTALL_PAGE_URL}

'
        - fields: ''
        - author_name: ''
        - title: ''
        - text: Apk from ${BITRISE_GIT_BRANCH} ready for pixel perfect ! Click on
            the link below or scan the QR.
        - message: ''
        - image_url: "$BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL"
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - cache-push@2.2.3: {}
  EndRegression:
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - cache-pull: {}
    - git-clone: {}
    - authenticate-with-github-oauth:
        inputs:
        - username: "$GITHUB_RELEASE_USER"
        - access_token: "$GITHUB_RELEASE_API_TOKEN"
    - script:
        title: Read Vname and Branch
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |+
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts
            python3 readReleaseInfo.py

    - script:
        title: Finish release branch
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Merge release to master
            git "fetch" "origin" "master"
            git "checkout" "master"
            git "pull" "--no-ff" "origin" "$BRANCH_RELEASE"
            git "push" "origin" "master"

            #Merge master to develop
            git "fetch" "origin" "develop"
            git "checkout" "develop"
            git "pull" "--no-ff" "origin" "master"
            git "push" "origin" "develop"

            #Delete release branch
            git "branch" "-d" "$BRANCH_RELEASE"
            git "push" "origin" "--delete" "$BRANCH_RELEASE"
    - cache-push: {}
  FlowUITest:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - git-clone@4.1: {}
    - script@1:
        title: Configure parameters
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts/
            chmod +x flow_tests_configurator.sh
            ./flow_tests_configurator.sh
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
    - script@1:
        title: BrowserStack Tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            ls
            cd scripts/
            chmod +x ./browserstackBitrise.sh
            ./browserstackBitrise.sh
    - slack@3.1.3:
        inputs:
        - channel: "#android-app-dev"
        - emoji: ":white_check_mark:"
        - from_username: Continuous integration
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            View UnitTests|https://addons-testing.bitrise.io/builds/${BITRISE_BUILD_SLUG}/summary?status=all
            View UITests|${BROWSERSTACK_TEST_REPORTS}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - emoji_on_error: ":laptop:"
        - from_username_on_error: Local Continuous integration
        - color_on_error: "#f01f33"
        - pretext: "*Flow Build Succeeded!*"
        - pretext_on_error: "*Flow Build Failed!*"
        - webhook_url: "$SLACK_CI_WEBHOOK"
  GenerateGitHubNotesOnlyPatch:
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - cache-pull: {}
    - git-clone: {}
    - authenticate-with-github-oauth:
        inputs:
        - username: "$GITHUB_RELEASE_USER"
        - access_token: "$GITHUB_RELEASE_API_TOKEN"
    - script:
        title: Read Vname and Branch
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |+
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts
            python3 readReleaseInfo.py

    - script@1:
        title: Generate Release Notes
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts
            python3 generateReleaseNotes.py

            #Commit and push release notes on release branch
            git "commit" "-am" "Update release notes"
            git "push" "origin" "$BRANCH_RELEASE"
    - cache-push: {}
  GithubDeployment:
    envs:
    - GITHUB_RELEASES_LIST: https://github.com/dhis2/dhis2-android-capture-app/releases
      opts:
        is_expand: false
    - GITHUB_RELEASE_BRANCH: master
      opts:
        is_expand: false
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.1: {}
    - cache-pull: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |-
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - gradle-runner:
        title: Build Release - Training APK
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/gradle-runner/assets/icon.svg
        inputs:
        - gradle_task: assembleRelease assembleDhisDebug
        - gradlew_path: "./gradlew"
    - script@1:
        title: Swap Java 8 to Java 11
        inputs:
        - content: |-
            # fail if any commands fails
            set -e
            # debug log
            set -x

            sudo update-alternatives --set javac /usr/lib/jvm/java-11-openjdk-amd64/bin/javac
            sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java
            export JAVA_HOME='/usr/lib/jvm/java-11-openjdk-amd64'
            envman add --key JAVA_HOME --value '/usr/lib/jvm/java-11-openjdk-amd64'
    - sign-apk:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/sign-apk/assets/icon.svg
        inputs:
        - signer_scheme: v2
        - use_apk_signer: 'true'
        - android_app: "$BITRISE_APK_PATH_LIST"
    - script:
        title: Read Version Name
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            RELEASE_TAG=$(cat buildsystem/dependencies.gradle | grep "vName" | awk -F ':' '{print $2}' | awk '{$1=$1};1' | sed 's/"//g' | tr " " _ | awk '{ print tolower($0) }')
            envman add --key GITHUB_RELEASE_TAG --value "$RELEASE_TAG"
    - script:
        title: Prepare APK to Upload
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Get training apk
            FIRST_APK_SIGNED=$(echo $BITRISE_SIGNED_APK_PATH_LIST | awk -F'|' '{print $1}')
            #Rename training APK
            FIRST_APK_SIGNED=$FIRST_APK_SIGNED"|dhis2-v"$GITHUB_RELEASE_TAG"_training.apk"

            #Get release apk
            SECOND_APK_SIGNED=$(echo $BITRISE_SIGNED_APK_PATH_LIST | awk -F'|' '{print $2}')
            #Rename release apk
            SECOND_APK_SIGNED=$SECOND_APK_SIGNED"|dhis2-v"$GITHUB_RELEASE_TAG".apk"

            #Get release no sms apk
            THIRD_APK_SIGNED=$(echo $BITRISE_SIGNED_APK_PATH_LIST | awk -F'|' '{print $3}')
            #Rename no sms release apk
            THIRD_APK_SIGNED=$THIRD_APK_SIGNED"|dhis2-v"$GITHUB_RELEASE_TAG"_no_sms.apk"

            #Format both apk for github api
            echo -e "$FIRST_APK_SIGNED\n$SECOND_APK_SIGNED\n$THIRD_APK_SIGNED" | envman add --key LIST_APK_TO_UPLOAD
    - script:
        title: Read release notes
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "Reading release notes"
            cat RELEASE.md | head -n 1 | envman add --key RELEASE_TITLE
            cat RELEASE.md | tail -n +3 | envman add --key RELEASE_BODY
    - github-release@0.11.0:
        inputs:
        - api_token: "$GITHUB_RELEASE_API_TOKEN"
        - username: "$GITHUB_RELEASE_USER"
        - name: "$RELEASE_TITLE"
        - body: "$RELEASE_BODY"
        - commit: "$GITHUB_RELEASE_BRANCH"
        - tag: "$GITHUB_RELEASE_TAG"
        - files_to_upload: "$LIST_APK_TO_UPLOAD"
    - deploy-to-bitrise-io@1.7.1:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/deploy-to-bitrise-io/assets/icon.svg
        inputs:
        - notify_user_groups: none
    - cache-push: {}
  JacocoAndSonarqubeTest:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4.1:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6.1:
        inputs:
        - merge_pr: 'no'
        - fetch_tags: 'yes'
        - manual_merge: 'no'
    - cache-pull@2: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - script:
        title: Rule engine build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            SUBMODULE=dhis2-rule-engine
            if [ -d "$SUBMODULE" ]; then
              cd dhis2-rule-engine

              FILE=build.gradle
              if [ -f "$FILE" ]; then
                  echo "$FILE rule engine exist"
                  exit 0
              fi

              echo "apply plugin: 'java'

              dependencies {

                  testImplementation 'junit:junit:4.12'
                  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
                  testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.2.9'
                  testCompile 'com.google.truth:truth:0.30'
                  testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'

                  implementation 'com.google.code.findbugs:jsr305:3.0.1'
                  compileOnly 'com.google.auto.value:auto-value:1.3'
                  annotationProcessor 'com.google.auto.value:auto-value:1.5.2'
                  compile 'com.google.guava:guava:16+'
                  compile 'joda-time:joda-time:2.10.5'
                  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
                  implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
                  implementation group : 'org.apache.commons', name : 'commons-jexl', version: '2.1.1'
              }" > build.gradle

              cd ..
              echo "Rule engine build gradle created"

            fi
    - script:
        title: zxing build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |+
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ "$BITRISE_GIT_BRANCH" = "master_legacy" ]; then
              exit 0
            fi

            SUBMODULE=zxing-core
            if [ -d "$SUBMODULE" ]; then
              echo "$SUBMODULE exist"
              FILE=zxing-core/core/build.gradle
              if [ -f "$FILE" ]; then
                  echo "$FILE exist"
                  exit 0
              fi

              echo "apply plugin: 'java'" > $FILE
              echo "zxing build gradle created"
            fi

    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - script@1:
        title: Run Unit tests with covergae
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # write your script here
            git fetch origin develop
            ./gradlew testDhisDebugUnitTestCoverage

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
    - script@1:
        title: Run sonarqube
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # write your script here
            ./gradlew sonarqube

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
  LocalPrimary:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - gradle-runner@2:
        title: Verify Kotlin codestyle
        inputs:
        - gradlew_path: "./gradlew"
        - app_file_include_filter: "*.apk"
        - app_file_exclude_filter: "\n"
        - test_apk_file_include_filter: ''
        - mapping_file_include_filter: ''
        - retry_on_failure: 'no'
        - gradle_task: ktlintCheck
    - android-unit-test@1:
        inputs:
        - variant: dhisDebug
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
    - script@1:
        title: BrowserStack Tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts/

            chmod +x ./browserstackBitrise.sh
            ./browserstackBitrise.sh
  LocalUITest:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - script:
        title: zxing build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            FILE=zxing-core/core/build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE exist"
                exit 0
            fi

            echo "apply plugin: 'java'" > $FILE
            echo "zxing build gradle created"
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
    - script@1:
        title: BrowserStack Tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts/

            chmod +x ./browserstackBitrise.sh
            ./browserstackBitrise.sh
    - slack@3.1.3:
        inputs:
        - channel: "#android-capture-app-ci"
        - emoji: ":white_check_mark:"
        - from_username: Continuous integration
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            View UnitTests|https://addons-testing.bitrise.io/builds/${BITRISE_BUILD_SLUG}/summary?status=all
            View UITests|${BROWSERSTACK_TEST_REPORTS}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - emoji_on_error: ":laptop:"
        - from_username_on_error: Local Continuous integration
        - color_on_error: "#f01f33"
        - pretext: "*Local Build Succeeded!*"
        - pretext_on_error: "*Local Build Failed!*"
        - webhook_url: "$SLACK_CI_WEBHOOK"
  PlaystoreAndGithubDeployment:
    envs:
    - GITHUB_RELEASES_LIST: https://github.com/dhis2/dhis2-android-capture-app/releases
      opts:
        is_expand: false
    - GITHUB_RELEASE_BRANCH: master
      opts:
        is_expand: false
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.1: {}
    - cache-pull: {}
    - script:
        title: Rule engine build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd dhis2-rule-engine

            FILE=build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE rule engine exist"
                exit 0
            fi

            echo "apply plugin: 'java'

            dependencies {

                testImplementation 'junit:junit:4.12'
                testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
                testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.2.9'
                testCompile 'com.google.truth:truth:0.30'
                testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'

                implementation 'com.google.code.findbugs:jsr305:3.0.1'
                compileOnly 'com.google.auto.value:auto-value:1.3'
                annotationProcessor 'com.google.auto.value:auto-value:1.5.2'
                compile 'com.google.guava:guava:16+'
                compile 'joda-time:joda-time:2.10.5'
                implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
                implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
                implementation group : 'org.apache.commons', name : 'commons-jexl', version: '2.1.1'
            }" > build.gradle

            cd ..
            echo "Rule engine build gradle created"
    - script:
        title: zxing build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            FILE=zxing-core/core/build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE exist"
                exit 0
            fi

            echo "apply plugin: 'java'" > $FILE
            echo "zxing build gradle created"
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |-
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - gradle-runner:
        title: Build Release - Training APK
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/gradle-runner/assets/icon.svg
        inputs:
        - gradle_task: assembleRelease assembleDhisDebug
        - gradlew_path: "./gradlew"
    - sign-apk:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/sign-apk/assets/icon.svg
        inputs:
        - android_app: "$BITRISE_APK_PATH_LIST"
    - script:
        title: Read Version Name
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            RELEASE_TAG=$(cat buildsystem/dependencies.gradle | grep "vName" | awk -F ':' '{print $2}' | awk '{$1=$1};1' | sed 's/"//g' | tr " " _ | awk '{ print tolower($0) }')
            envman add --key GITHUB_RELEASE_TAG --value "$RELEASE_TAG"
    - script:
        title: Prepare APK to Upload
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Get training apk
            FIRST_APK_SIGNED=$(echo $BITRISE_SIGNED_APK_PATH_LIST | awk -F'|' '{print $1}')
            #Rename training APK
            FIRST_APK_SIGNED=$FIRST_APK_SIGNED"|dhis2-v"$GITHUB_RELEASE_TAG"_training.apk"

            #Get release apk
            SECOND_APK_SIGNED=$(echo $BITRISE_SIGNED_APK_PATH_LIST | awk -F'|' '{print $2}')
            #Rename release apk
            SECOND_APK_SIGNED=$SECOND_APK_SIGNED"|dhis2-v"$GITHUB_RELEASE_TAG".apk"

            #Get release no sms apk
            THIRD_APK_SIGNED=$(echo $BITRISE_SIGNED_APK_PATH_LIST | awk -F'|' '{print $3}')
            #Rename no sms release apk
            THIRD_APK_SIGNED=$THIRD_APK_SIGNED"|dhis2-v"$GITHUB_RELEASE_TAG"_no_sms.apk"

            #Format both apk for github api
            echo -e "$FIRST_APK_SIGNED\n$SECOND_APK_SIGNED\n$THIRD_APK_SIGNED" | envman add --key LIST_APK_TO_UPLOAD
            echo -e "$THIRD_APK_SIGNED" | envman add --key PLAYSTORE_APK
    - script:
        title: Read release notes
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "Reading release notes"
            cat RELEASE.md | head -n 1 | envman add --key RELEASE_TITLE
            cat RELEASE.md | tail -n +3 | envman add --key RELEASE_BODY
    - github-release@0.11.0:
        inputs:
        - api_token: "$GITHUB_RELEASE_API_TOKEN"
        - username: "$GITHUB_RELEASE_USER"
        - name: "$RELEASE_TITLE"
        - body: "$RELEASE_BODY"
        - commit: "$GITHUB_RELEASE_BRANCH"
        - tag: "$GITHUB_RELEASE_TAG"
        - files_to_upload: "$LIST_APK_TO_UPLOAD"
    - google-play-deploy@3:
        inputs:
        - package_name: com.dhis2
        - whatsnews_dir: "./whatsnew"
        - app_path: "$PLAYSTORE_APK"
        - service_account_json_key_path: "$BITRISEIO_GOOGLE_PLAY_JSON_URL"
    - deploy-to-bitrise-io@1.7.1:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/deploy-to-bitrise-io/assets/icon.svg
        inputs:
        - notify_user_groups: none
    - cache-push: {}
  primary:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6:
        inputs:
        - manual_merge: 'no'
        - fetch_tags: 'yes'
        - merge_pr: 'no'
    - cache-pull@2: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - script:
        title: Choose reviewers randomly
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            exit 0

            if [ ! -z "$BITRISE_PULL_REQUEST" ]; then

            cd scripts
            echo "Downloading and installing script dependencies"
            apt-get update
            apt-get install "-y" "python3-pip"
            pip3 install -r requirements.txt

            python3 reviewers.py
            fi
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - gradle-runner@2:
        title: Verify Kotlin codestyle
        inputs:
        - gradlew_path: "./gradlew"
        - app_file_include_filter: "*.apk"
        - app_file_exclude_filter: "\n"
        - test_apk_file_include_filter: ''
        - mapping_file_include_filter: ''
        - retry_on_failure: 'no'
        - gradle_task: ktlintCheck
    - script@1:
        title: Run Unit tests with covergae
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # write your script here
            git fetch
            ./gradlew testDhisDebugUnitTestCoverage

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
    - script@1:
        title: Run sonarqube
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # write your script here
            ./gradlew sonarqube

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
        is_always_run: true
    - script@1:
        title: BrowserStack Tests
        inputs:
        - content: |+
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts/

            apt-get install "-y" "jq"

            chmod +x ./browserstackBitrise.sh
            ./browserstackBitrise.sh

    - avd-manager@1:
        inputs:
        - api_level: '30'
    - wait-for-android-emulator@1: {}
    - gradle-runner@2:
        inputs:
        - gradle_task: compose-table:connectedAndroidTest
        - gradlew_path: "./gradlew"
    - slack@3:
        inputs:
        - channel: "#android-capture-app-ci"
        - emoji: ":white_check_mark:"
        - from_username: Continuous integration
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            View UnitTests|https://addons-testing.bitrise.io/builds/${BITRISE_BUILD_SLUG}/summary?status=all
            View UITests|${BROWSERSTACK_TEST_REPORTS}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - emoji_on_error: ":imp:"
        - from_username_on_error: Continuous integration
        - color_on_error: "#f01f33"
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - deploy-to-bitrise-io@2:
        inputs:
        - notify_email_list: "$APP_DEVS_MAILS"
        - notify_user_groups: none
    - cache-push@2: {}
  primary-browserstack:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6.1:
        inputs:
        - manual_merge: 'no'
        - fetch_tags: 'yes'
        - merge_pr: 'no'
    - cache-pull@2: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - script:
        title: Choose reviewers randomly
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ ! -z "$BITRISE_PULL_REQUEST" ]; then

            cd scripts
            echo "Downloading and installing script dependencies"
            apt-get update
            apt-get install "-y" "python3-pip"
            pip3 install -r requirements.txt

            python3 reviewers.py
            fi
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
        is_always_run: true
    - browserstack-bitrise-espresso-step@1:
        inputs:
        - browserstack_accesskey: "$BROWSERSTACK_ACCESS_KEY"
        - devices_list: Google Pixel 3a-9.0
        - check_build_status: 'false'
        - use_test_sharding: '{"numberOfShards": 2}'
        - api_params: ''
        - filter_test: class org.dhis2.usescases.UseCaseTestsSuite
        - project: "${BITRISE_TRIGGERED_WORKFLOW_ID}"
        - browserstack_username: "$BROWSERSTACK_USERNAME"
    - avd-manager@1:
        inputs:
        - api_level: '30'
    - wait-for-android-emulator@1: {}
    - gradle-runner@2:
        inputs:
        - gradle_task: compose-table:connectedAndroidTest
        - gradlew_path: "./gradlew"
    - slack@3.1.3:
        inputs:
        - channel: "#android-capture-app-ci"
        - emoji: ":white_check_mark:"
        - from_username: Continuous integration
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            View UnitTests|https://addons-testing.bitrise.io/builds/${BITRISE_BUILD_SLUG}/summary?status=all
            View UITests|${BROWSERSTACK_TEST_REPORTS}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - emoji_on_error: ":imp:"
        - from_username_on_error: Continuous integration
        - color_on_error: "#f01f33"
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - deploy-to-bitrise-io@1:
        inputs:
        - notify_email_list: "$APP_DEVS_MAILS"
        - notify_user_groups: none
    - cache-push@2: {}
  primary-j11:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4.0.5:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.1: {}
    - cache-pull@2: {}
    - script:
        title: Choose reviewers randomly
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ ! -z "$BITRISE_PULL_REQUEST" ]; then

            cd scripts
            echo "Downloading and installing script dependencies"
            apt-get update
            apt-get install "-y" "python3-pip"
            pip3 install -r requirements.txt

            python3 reviewers.py
            fi
    - script:
        title: Rule engine build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd dhis2-rule-engine

            FILE=build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE rule engine exist"
                exit 0
            fi

            echo "apply plugin: 'java'

            dependencies {

                testImplementation 'junit:junit:4.12'
                testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
                testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.2.9'
                testCompile 'com.google.truth:truth:0.30'
                testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'

                implementation 'com.google.code.findbugs:jsr305:3.0.1'
                compileOnly 'com.google.auto.value:auto-value:1.3'
                annotationProcessor 'com.google.auto.value:auto-value:1.5.2'
                compile 'com.google.guava:guava:16+'
                compile 'joda-time:joda-time:2.10.5'
                implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
                implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
                implementation group : 'org.apache.commons', name : 'commons-jexl', version: '2.1.1'
            }" > build.gradle

            cd ..
            echo "Rule engine build gradle created"
    - script:
        title: zxing build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            FILE=zxing-core/core/build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE exist"
                exit 0
            fi

            echo "apply plugin: 'java'" > $FILE
            echo "zxing build gradle created"
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - gradle-runner@1:
        title: Verify Kotlin codestyle
        inputs:
        - gradlew_path: "./gradlew"
        - app_file_include_filter: "*.apk"
        - app_file_exclude_filter: "\n"
        - test_apk_file_include_filter: ''
        - mapping_file_include_filter: ''
        - retry_on_failure: 'no'
        - gradle_task: ":app:ktlintCheck :form:ktlintCheck :dhis_android_analytics:ktlintCheck"
    - android-unit-test@1:
        inputs:
        - variant: dhisDebug
        - module: app
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
    - script@1:
        title: BrowserStack Tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts/

            apt-get install "-y" "jq"

            chmod +x ./browserstackBitrise.sh
            ./browserstackBitrise.sh
    - slack@3.1.3:
        inputs:
        - channel: "#android-capture-app-ci"
        - emoji: ":white_check_mark:"
        - from_username: Continuous integration
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            View UnitTests|https://addons-testing.bitrise.io/builds/${BITRISE_BUILD_SLUG}/summary?status=all
            View UITests|${BROWSERSTACK_TEST_REPORTS}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - emoji_on_error: ":imp:"
        - from_username_on_error: Continuous integration
        - color_on_error: "#f01f33"
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - deploy-to-bitrise-io@1:
        inputs:
        - notify_email_list: "$APP_DEVS_MAILS"
        - notify_user_groups: none
    - cache-push@2: {}
  primaryBuckUp:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4.0.5:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.1: {}
    - cache-pull@2: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - script:
        title: Choose reviewers randomly
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ ! -z "$BITRISE_PULL_REQUEST" ]; then

            cd scripts
            echo "Downloading and installing script dependencies"
            apt-get update
            apt-get install "-y" "python3-pip"
            pip3 install -r requirements.txt

            python3 reviewers.py
            fi
    - script:
        title: Rule engine build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd dhis2-rule-engine

            FILE=build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE rule engine exist"
                exit 0
            fi

            echo "apply plugin: 'java'

            dependencies {

                testImplementation 'junit:junit:4.12'
                testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
                testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.2.9'
                testCompile 'com.google.truth:truth:0.30'
                testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'

                implementation 'com.google.code.findbugs:jsr305:3.0.1'
                compileOnly 'com.google.auto.value:auto-value:1.3'
                annotationProcessor 'com.google.auto.value:auto-value:1.5.2'
                compile 'com.google.guava:guava:16+'
                compile 'joda-time:joda-time:2.10.5'
                implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
                implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
                implementation group : 'org.apache.commons', name : 'commons-jexl', version: '2.1.1'
            }" > build.gradle

            cd ..
            echo "Rule engine build gradle created"
    - script:
        title: zxing build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ "$BITRISE_GIT_BRANCH" = "master" ]; then
              exit 0
            fi

            FILE=zxing-core/core/build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE exist"
                exit 0
            fi

            echo "apply plugin: 'java'" > $FILE
            echo "zxing build gradle created"
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - gradle-runner@1:
        title: Verify Kotlin codestyle
        inputs:
        - gradlew_path: "./gradlew"
        - app_file_include_filter: "*.apk"
        - app_file_exclude_filter: "\n"
        - test_apk_file_include_filter: ''
        - mapping_file_include_filter: ''
        - retry_on_failure: 'no'
        - gradle_task: ":app:ktlintCheck :form:ktlintCheck :dhis_android_analytics:ktlintCheck"
    - android-unit-test@1:
        inputs:
        - variant: dhisDebug
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
    - script@1:
        title: BrowserStack Tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts/

            apt-get install "-y" "jq"

            chmod +x ./browserstackBitrise.sh
            ./browserstackBitrise.sh
    - slack@3.1.3:
        inputs:
        - channel: "#android-capture-app-ci"
        - emoji: ":white_check_mark:"
        - from_username: Continuous integration
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            View UnitTests|https://addons-testing.bitrise.io/builds/${BITRISE_BUILD_SLUG}/summary?status=all
            View UITests|${BROWSERSTACK_TEST_REPORTS}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - emoji_on_error: ":imp:"
        - from_username_on_error: Continuous integration
        - color_on_error: "#f01f33"
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - deploy-to-bitrise-io@1:
        inputs:
        - notify_email_list: "$APP_DEVS_MAILS"
        - notify_user_groups: none
    - cache-push@2: {}
  PrimaryCompose:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6.1:
        inputs:
        - manual_merge: 'no'
        - fetch_tags: 'yes'
        - merge_pr: 'no'
    - cache-pull@2: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - script:
        title: Choose reviewers randomly
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ ! -z "$BITRISE_PULL_REQUEST" ]; then

            cd scripts
            echo "Downloading and installing script dependencies"
            apt-get update
            apt-get install "-y" "python3-pip"
            pip3 install -r requirements.txt

            python3 reviewers.py
            fi
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - gradle-runner@1:
        title: Verify Kotlin codestyle
        inputs:
        - gradlew_path: "./gradlew"
        - app_file_include_filter: "*.apk"
        - app_file_exclude_filter: "\n"
        - test_apk_file_include_filter: ''
        - mapping_file_include_filter: ''
        - retry_on_failure: 'no'
        - gradle_task: ":app:ktlintFormat :form:ktlintFormat :dhis_android_analytics:ktlintFormat
            :commons:ktlintFormat :compose-table:ktlintFormat :dhis2_android_maps:ktlintFormat"
    - script@1:
        title: Run Unit tests with covergae
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # write your script here
            git fetch
            ./gradlew testDhisDebugUnitTestCoverage
            #./gradlew :app:testDhisDebugUnitTest :dhis_android_analytics:testDhisDebugUnitTest :form:testDhisDebugUnitTest

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
    - script@1:
        title: Run sonarqube
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # write your script here
            ./gradlew sonarqube

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
    - script@1:
        title: BrowserStack Tests
        inputs:
        - content: |+
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts/

            apt-get install "-y" "jq"

            chmod +x ./browserstackBitrise.sh
            ./browserstackBitrise.sh

    - avd-manager@1:
        inputs:
        - api_level: '30'
    - wait-for-android-emulator@1: {}
    - gradle-runner@2:
        inputs:
        - gradle_task: compose-table:connectedAndroidTest
        - gradlew_path: "./gradlew"
    - slack@3.1.3:
        inputs:
        - channel: "#android-capture-app-ci"
        - emoji: ":white_check_mark:"
        - from_username: Continuous integration
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            View UnitTests|https://addons-testing.bitrise.io/builds/${BITRISE_BUILD_SLUG}/summary?status=all
            View UITests|${BROWSERSTACK_TEST_REPORTS}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - emoji_on_error: ":imp:"
        - from_username_on_error: Continuous integration
        - color_on_error: "#f01f33"
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - deploy-to-bitrise-io@1:
        inputs:
        - notify_email_list: "$APP_DEVS_MAILS"
        - notify_user_groups: none
    - cache-push@2: {}
  PrimaryCopy:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4.0.5:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.1: {}
    - cache-pull@2: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |
            #!/bin/bash
            set -ex

            cd buildsystem/
            VERSION_SDK=$(cat dependencies.gradle | grep "minSdk" | awk -F':' '{print $2}' | awk -F',' '{print $1}')
            KITKAT_SDK=19

            if [[ "$VERSION_SDK" -eq "KITKAT_SDK" ]];
            then
              echo "Changing enviroment to Java 8 ..."
              sudo update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac
              sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java

              export JAVA_HOME='/usr/lib/jvm/java-8-openjdk-amd64'
              envman add --key JAVA_HOME --value '/usr/lib/jvm/java-8-openjdk-amd64'
            fi
    - script:
        title: Choose reviewers randomly
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            exit 0
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ ! -z "$BITRISE_PULL_REQUEST" ]; then

            cd scripts
            echo "Downloading and installing script dependencies"
            apt-get update
            apt-get install "-y" "python3-pip"
            pip3 install -r requirements.txt

            python3 reviewers.py
            fi
    - script:
        title: Rule engine build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd dhis2-rule-engine

            FILE=build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE rule engine exist"
                exit 0
            fi

            echo "apply plugin: 'java'

            dependencies {

                testImplementation 'junit:junit:4.12'
                testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
                testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.2.9'
                testCompile 'com.google.truth:truth:0.30'
                testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'

                implementation 'com.google.code.findbugs:jsr305:3.0.1'
                compileOnly 'com.google.auto.value:auto-value:1.3'
                annotationProcessor 'com.google.auto.value:auto-value:1.5.2'
                compile 'com.google.guava:guava:16+'
                compile 'joda-time:joda-time:2.10.5'
                implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
                implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
                implementation group : 'org.apache.commons', name : 'commons-jexl', version: '2.1.1'
            }" > build.gradle

            cd ..
            echo "Rule engine build gradle created"
    - script:
        title: zxing build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            FILE=zxing-core/core/build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE exist"
                exit 0
            fi

            echo "apply plugin: 'java'" > $FILE
            echo "zxing build gradle created"
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - gradle-runner@1:
        title: Verify Kotlin codestyle
        inputs:
        - gradlew_path: "./gradlew"
        - app_file_include_filter: "*.apk"
        - app_file_exclude_filter: "\n"
        - test_apk_file_include_filter: ''
        - mapping_file_include_filter: ''
        - retry_on_failure: 'no'
        - gradle_task: ":app:ktlintCheck :form:ktlintCheck :dhis_android_analytics:ktlintCheck"
    - android-unit-test@1:
        inputs:
        - variant: dhisDebug
        - module: app
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
    - script@1:
        title: BrowserStack Tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts/

            apt-get install "-y" "jq"

            chmod +x ./browserstackBitrise.sh
            ./browserstackBitrise.sh
    - slack@3.1.3:
        inputs:
        - channel: "#android-capture-app-ci"
        - emoji: ":white_check_mark:"
        - from_username: Continuous integration
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            View UnitTests|https://addons-testing.bitrise.io/builds/${BITRISE_BUILD_SLUG}/summary?status=all
            View UITests|${BROWSERSTACK_TEST_REPORTS}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - emoji_on_error: ":imp:"
        - from_username_on_error: Continuous integration
        - color_on_error: "#f01f33"
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - deploy-to-bitrise-io@1:
        inputs:
        - notify_email_list: "$APP_DEVS_MAILS"
        - notify_user_groups: none
    - cache-push@2: {}
  PullRequest:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6:
        inputs:
        - manual_merge: 'no'
        - fetch_tags: 'yes'
        - merge_pr: 'no'
    - cache-pull@2: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - script:
        title: Choose reviewers randomly
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ ! -z "$BITRISE_PULL_REQUEST" ]; then

            cd scripts
            echo "Downloading and installing script dependencies"
            apt-get update
            apt-get install "-y" "python3-pip"
            pip3 install -r requirements.txt

            python3 reviewers.py
            fi
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - gradle-runner@2:
        title: Verify Kotlin codestyle
        inputs:
        - gradlew_path: "./gradlew"
        - app_file_include_filter: "*.apk"
        - app_file_exclude_filter: "\n"
        - test_apk_file_include_filter: ''
        - mapping_file_include_filter: ''
        - retry_on_failure: 'no'
        - gradle_task: ktlintCheck
    - script@1:
        title: Run Unit tests with covergae
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # write your script here
            git fetch
            ./gradlew testDhisDebugUnitTestCoverage

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
    - script@1:
        title: Run sonarqube
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # write your script here
            ./gradlew sonarqube

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
        is_always_run: true
    - script@1:
        title: BrowserStack Tests
        inputs:
        - content: |+
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts/

            apt-get install "-y" "jq"

            chmod +x ./browserstackBitrise.sh
            ./browserstackBitrise.sh

    - avd-manager@1:
        inputs:
        - api_level: '30'
    - wait-for-android-emulator@1: {}
    - gradle-runner@2:
        inputs:
        - gradle_task: compose-table:connectedAndroidTest
        - gradlew_path: "./gradlew"
    - slack@3:
        inputs:
        - channel: "#android-capture-app-ci"
        - emoji: ":white_check_mark:"
        - from_username: Continuous integration
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            View UnitTests|https://addons-testing.bitrise.io/builds/${BITRISE_BUILD_SLUG}/summary?status=all
            View UITests|${BROWSERSTACK_TEST_REPORTS}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - emoji_on_error: ":imp:"
        - from_username_on_error: Continuous integration
        - color_on_error: "#f01f33"
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - deploy-to-bitrise-io@2:
        inputs:
        - notify_email_list: "$APP_DEVS_MAILS"
        - notify_user_groups: none
    - cache-push@2: {}
  ReviewersTest:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4.0.5:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - cache-pull@2: {}
    - script:
        title: Choose reviewers randomly
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ ! -z "$BITRISE_PULL_REQUEST" ]; then

            cd scripts
            echo "Downloading and installing script dependencies"
            apt-get update
            apt-get install "-y" "python3-pip"
            pip3 install -r requirements.txt

            #python3 reviewers.py
            fi
  SDK-APP-Integration:
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone: {}
    - script:
        title: Checkout commit hash
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd dhis2-android-sdk/

            if [[ -z "${SDK_TAG}" ]]; then
              echo "SDK_TAG has no value so it will point to the latest commit of develop SDK branch"
              git "checkout" "develop"
              git "pull" "origin" "develop"
            else
              echo "SDK_TAG has value $SDK_TAG"
              git "checkout" $SDK_TAG
              git "merge" "origin/$SDK_TAG"
            fi
    - cache-pull: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |-
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - script:
        title: Rule engine build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd dhis2-rule-engine

            FILE=build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE rule engine exist"
                exit 0
            fi

            echo "apply plugin: 'java'

            dependencies {

                testImplementation 'junit:junit:4.12'
                testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
                testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.2.9'
                testCompile 'com.google.truth:truth:0.30'
                testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'

                implementation 'com.google.code.findbugs:jsr305:3.0.1'
                compileOnly 'com.google.auto.value:auto-value:1.3'
                annotationProcessor 'com.google.auto.value:auto-value:1.5.2'
                compile 'com.google.guava:guava:16+'
                compile 'joda-time:joda-time:2.10.5'
                implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
                implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
                implementation group : 'org.apache.commons', name : 'commons-jexl', version: '2.1.1'
            }" > build.gradle

            cd ..
            echo "Rule engine build gradle created"
    - script:
        title: zxing build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            FILE=zxing-core/core/build.gradle
            if [ -f "$FILE" ]; then
                echo "$FILE exist"
                exit 0
            fi

            echo "apply plugin: 'java'" > $FILE
            echo "zxing build gradle created"
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - android-unit-test@1.0.0:
        inputs:
        - variant: dhisDebug
        - module: app
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisDebug
        - module: app
    - virtual-device-testing-for-android@1:
        inputs:
        - test_type: instrumentation
        - inst_test_runner_class: org.dhis2.Dhis2Runner
        - inst_use_orchestrator: 'true'
        - num_flaky_test_attempts: '3'
        - test_timeout: '3600'
        - test_devices: Pixel2,27,en,portrait
    - deploy-to-bitrise-io@1.7.1:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/deploy-to-bitrise-io/assets/icon.svg
        inputs:
        - notify_user_groups: none
    - cache-push: {}
  StartHotfixRegression:
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - cache-pull: {}
    - git-clone: {}
    - authenticate-with-github-oauth@0.9.2:
        inputs:
        - username: "$GITHUB_RELEASE_USER"
        - access_token: "$GITHUB_RELEASE_API_TOKEN"
    - script:
        title: Read Vname and Branch
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |+
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts
            python3 readReleaseInfo.py

    - script:
        title: Create new branch and change version code_name
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Pull and create new branch
            git "pull" "origin" "master"
            git "checkout" "master"
            git "checkout" "-b" "$BRANCH_RELEASE"
    - script:
        title: Change versionCode and versionName
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Change version name
            cd buildsystem/
            sed -i -e "s/vName.*/vName: \"$NAME_RELEASE\"/" dependencies.gradle

            #change version code
            VERSION_CODE=$(cat dependencies.gradle | grep "vCode" | awk -F':' '{print $2}' | awk -F',' '{print $1}')
            (( VERSION_CODE += 1 ))
            sed -i -e "s/vCode.*/vCode: $VERSION_CODE,/" dependencies.gradle

            cd ..
    - script:
        title: Push changes
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Push new branch with changes
            git add .
            git commit -m "Increase version, name and create branch"
            git "push" "origin" "$BRANCH_RELEASE"
    - script@1.1:
        title: Send Email
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            newline=$'\\n'
            MESSAGE_TO_SEND="Hello everyone,${newline}${newline}This is an automatic email to let you know that the hotfix process for version $NAME_RELEASE has started. A new branch hotfix/$NAME_RELEASE from master has been created and frozen.${newline}${newline}Regards"

            curl --request POST \
              --url https://api.sendgrid.com/v3/mail/send \
              --header "Authorization: Bearer $SENDGRID_API_KEY" \
              --header 'Content-Type: application/json' \
              --data '{"personalizations": [{"to": [{"email": "dhis2-mobile@dhis2.org"}]}],"from": {"email": "android@dhis2.org"},"subject": "Hotfixing process has started!","content": [{"type": "text/plain", "value": "'"$MESSAGE_TO_SEND"'"}]}'
    - slack@3.1.3:
        is_always_run: false
        inputs:
        - channel: "#android-capture-app-ci"
        - fields: ''
        - buttons: "\n"
        - from_username: Automatic Releases
        - text: |-
            Hello everyone @here, this is an automatic message to let you know that a new hotfix ${NAME_RELEASE} regression has just started.
            Branch ${BRANCH_RELEASE} created with new version code and name in order to perform a testing cycle.

            Please remember that any new feature develop during this testing cycle should go to develop branch.

            Thanks and happy weekend!!
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - cache-push: {}
  StartInternalRegression:
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - cache-pull: {}
    - git-clone: {}
    - authenticate-with-github-oauth@0.9.2:
        inputs:
        - username: "$GITHUB_RELEASE_USER"
        - access_token: "$GITHUB_RELEASE_API_TOKEN"
    - script:
        title: Read Vname and Branch
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |+
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts
            python3 readReleaseInfo.py

    - script:
        title: Create new branch and change version code_name
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Pull and create new branch
            git "pull" "origin" "develop"
            git "checkout" "develop"
            git "checkout" "-b" "$BRANCH_RELEASE"
    - script:
        title: Change versionCode and versionName
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Change version name
            cd buildsystem/
            sed -i -e "s/vName.*/vName: \"$NAME_RELEASE\"/" dependencies.gradle

            #change version code
            VERSION_CODE=$(cat dependencies.gradle | grep "vCode" | awk -F':' '{print $2}' | awk -F',' '{print $1}')
            (( VERSION_CODE += 1 ))
            sed -i -e "s/vCode.*/vCode: $VERSION_CODE,/" dependencies.gradle

            cd ..
    - script:
        title: Push changes
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Push new branch with changes
            git add .
            git commit -m "Increase version, name and create branch"
            git "push" "origin" "$BRANCH_RELEASE"
    - script@1.1:
        title: Send Email
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            newline=$'\\n'
            MESSAGE_TO_SEND="Hello everyone,${newline}${newline}This is an automatic email to let you know that a new sprint internal process for version $NAME_RELEASE has started. A new branch release/$NAME_RELEASE from develop has been created and frozen.${newline}During the next days while @Nancy is performing test cycles we will be fixing bugs, so please if you find anything let us.${newline}${newline}Regards"

            curl --request POST \
              --url https://api.sendgrid.com/v3/mail/send \
              --header "Authorization: Bearer $SENDGRID_API_KEY" \
              --header 'Content-Type: application/json' \
              --data '{"personalizations": [{"to": [{"email": "dhis2-mobile@dhis2.org"}]}],"from": {"email": "android@dhis2.org"},"subject": "Milestone internal process has started!","content": [{"type": "text/plain", "value": "'"$MESSAGE_TO_SEND"'"}]}'
    - slack@3.1.3:
        is_always_run: false
        inputs:
        - channel: "#android-capture-app-ci"
        - fields: ''
        - buttons: "\n"
        - from_username: Automatic Releases
        - text: |-
            Hello everyone @here, this is an automatic message to let you know that a new internal sprint ${NAME_RELEASE} regression has just started.
            Branch ${BRANCH_RELEASE} created with new version code and name in order to perform a testing cycle.

            Please remember that any new feature develop during this testing cycle should go to develop branch.

            Thanks and happy weekend!!
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - cache-push: {}
  StartRegression:
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - cache-pull: {}
    - git-clone: {}
    - authenticate-with-github-oauth@0.9.2:
        inputs:
        - username: "$GITHUB_RELEASE_USER"
        - access_token: "$GITHUB_RELEASE_API_TOKEN"
    - script:
        title: Read Vname and Branch
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts
            python3 readReleaseInfo.py
    - script:
        title: Create new branch and change version code_name
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Pull and create new branch
            git "pull" "origin" "develop"
            git "checkout" "develop"
            git "checkout" "-b" "$BRANCH_RELEASE"
    - script:
        title: Change versionCode and versionName
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Change version name
            cd buildsystem/
            sed -i -e "s/vName.*/vName: \"$NAME_RELEASE\"/" dependencies.gradle

            #change version code
            VERSION_CODE=$(cat dependencies.gradle | grep "vCode" | awk -F':' '{print $2}' | awk -F',' '{print $1}')
            (( VERSION_CODE += 1 ))
            sed -i -e "s/vCode.*/vCode: $VERSION_CODE,/" dependencies.gradle

            cd ..
    - script:
        title: Push changes
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            #Push new branch with changes
            git add .
            git commit -m "Increase version, name and create branch"
            git "push" "origin" "$BRANCH_RELEASE"
    - script@1.1:
        title: Send Email
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            newline=$'\\n'
            MESSAGE_TO_SEND="Hello everyone,${newline}${newline}This is an automatic email to let you know that the release process for version $NAME_RELEASE has started. A new branch release/$NAME_RELEASE from develop has been created and frozen.${newline}During the next days while @Nancy is performing test cycles we will be fixing bugs, so please if you find anything let us.${newline}${newline}Regards"

            curl --request POST \
              --url https://api.sendgrid.com/v3/mail/send \
              --header "Authorization: Bearer $SENDGRID_API_KEY" \
              --header 'Content-Type: application/json' \
              --data '{"personalizations": [{"to": [{"email": "dhis2-mobile@dhis2.org"}]}],"from": {"email": "android@dhis2.org"},"subject": "Release process has started!","content": [{"type": "text/plain", "value": "'"$MESSAGE_TO_SEND"'"}]}'
    - slack@3.1.3:
        is_always_run: false
        inputs:
        - channel: "#android-capture-app-ci"
        - fields: ''
        - buttons: "\n"
        - from_username: Automatic Releases
        - text: |-
            Hello everyone @here, this is an automatic message to let you know that a new Sprint/Release ${NAME_RELEASE} regression has just started.
            Branch ${BRANCH_RELEASE} created with new version code and name in order to perform a testing cycle.

            Please remember that any new feature develop during this testing cycle should go to develop branch.

            Thanks and happy weekend!!
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - cache-push: {}
  TestingContributions:
    steps:
    - activate-ssh-key@4.0.5:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - script@1:
        title: Clone Contribution project
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            set -x

            # write your script here
            echo "Hello World!"

            git "init"
            git "remote" "add" "origin" "https://github.com/Saudigitus/dhis2-android-capture-app.git"
            git "fetch" "origin" "refs/heads/$BITRISE_GIT_BRANCH"
            git "checkout" "$BITRISE_GIT_BRANCH"
            git "submodule" "update" "--init" "--recursive"
            git "merge" "origin/$BITRISE_GIT_BRANCH"
            pwd
            ls -la
    - cache-pull: {}
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - android-build:
        inputs:
        - variant: "$VARIANT"
        - module: app
    - deploy-to-bitrise-io:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/deploy-to-bitrise-io/assets/icon.svg
        inputs:
        - notify_user_groups: none
    - create-install-page-qr-code@1.0.0: {}
    - slack@3.1.3:
        is_always_run: false
        run_if: '{{getenv "SLACK" | ne "no"}}'
        inputs:
        - channel: C03MLE6898W
        - emoji: ":white_check_mark:"
        - from_username: CI Test Deployment
        - pretext: ''
        - buttons: 'Bitrise apk|${BITRISE_PUBLIC_INSTALL_PAGE_URL}

'
        - fields: ''
        - author_name: ''
        - title: ''
        - text: Apk from ${BITRISE_GIT_BRANCH} ready for pixel perfect ! Click on
            the link below or scan the QR.
        - message: ''
        - image_url: "$BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL"
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - cache-push@2.2.3: {}
  TestingDeployment:
    steps:
    - activate-ssh-key@4.0.5:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.1:
        inputs:
        - limit_submodule_update_depth: 'no'
    - cache-pull: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |-
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - android-build:
        inputs:
        - variant: "$VARIANT"
        - module: app
    - script:
        title: Assign firebase emails
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [[ -z "${TESTING_INDIVIDUAL}" ]]; then
              envman add --key TESTING_INDIVIDUAL_INTERNAL --value "nancy@dhis2.org"
            else
              envman add --key TESTING_INDIVIDUAL_INTERNAL --value "$TESTING_INDIVIDUAL"
            fi
    - firebase-app-distribution:
        inputs:
        - app: "$FIREBASE_DHIS_DEBUG_ID"
        - groups: "$TESTING_GROUPS"
        - testers: "$TESTING_INDIVIDUAL_INTERNAL"
        - firebase_token: "$FIREBASE_CI_TOKEN"
    - deploy-to-bitrise-io:
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/deploy-to-bitrise-io/assets/icon.svg
        inputs:
        - notify_user_groups: none
    - create-install-page-qr-code@1.0.0: {}
    - slack@3.1.3:
        is_always_run: false
        run_if: '{{getenv "SLACK" | ne "no"}}'
        inputs:
        - channel: "#android-testing-troubleshooting"
        - emoji: ":white_check_mark:"
        - from_username: CI Test Deployment
        - pretext: ''
        - buttons: |
            Bitrise apk|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
            firebase apk|${FIREBASE_DEPLOYMENT_LINK}
        - fields: ''
        - author_name: ''
        - title: ''
        - text: |-
            Apk is ready for testing !!
            Generated from the branch ${BITRISE_GIT_BRANCH}, deployed on firebase and bitrise. The following users/groups : ${TESTING_GROUPS} ${TESTING_INDIVIDUAL_INTERNAL} will received a firebase email.

            Happy Testing !!
        - message: ''
        - image_url: "$BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL"
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - cache-push@2.2.3:
        is_always_run: true
  Translations:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4.0.5:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.1: {}
    - cache-pull@2: {}
    - script@1:
        title: Set Java 8 as default
        inputs:
        - content: |-
            sudo update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac
            sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
            export JAVA_HOME='/usr/lib/jvm/java-8-openjdk-amd64'
            envman add --key JAVA_HOME --value '/usr/lib/jvm/java-8-openjdk-amd64'
    - script:
        title: Choose reviewers randomly
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        inputs:
        - content: |-
            exit 0
            #!/usr/bin/env bash

            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ ! -z "$BITRISE_PULL_REQUEST" ]; then

            cd scripts
            echo "Downloading and installing script dependencies"
            apt-get update
            apt-get install "-y" "python3-pip"
            pip3 install -r requirements.txt

            python3 reviewers.py
            fi
    - cache-push@2: {}
  UITestingSpecific:
    description: |-
      Workflow that:

      1) Run UI test on Browserstack


      2) Notify through slack in #android-capture-app-ci with the next build variant:
         - $SLACK : yes|no
    steps:
    - activate-ssh-key@4.0.5:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0.18: {}
    - cache-pull@2.1.4: {}
    - script:
        title: zxing build.gradle
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
        is_always_run: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ "$BITRISE_GIT_BRANCH" = "master_legacy" ]; then
              exit 0
            fi

            SUBMODULE=zxing-core
            if [ -d "$SUBMODULE" ]; then
              echo "$SUBMODULE exist"
              FILE=zxing-core/core/build.gradle
              if [ -f "$FILE" ]; then
                  echo "$FILE exist"
                  exit 0
              fi

              echo "apply plugin: 'java'" > $FILE
              echo "zxing build gradle created"
            fi
    - script@1:
        title: Sets JAVA 8
        inputs:
        - content: |
            chmod +x ./scripts/change_java_version.sh
            ./scripts/change_java_version.sh
    - install-missing-android-tools:
        inputs:
        - gradlew_path: "./gradlew"
    - android-build-for-ui-testing@0:
        inputs:
        - variant: dhisUITestingDebug
        - module: app
    - script@1:
        title: BrowserStack Espresso
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            cd scripts/

            apt-get install "-y" "jq"

            chmod +x ./browserstackBitrise.sh
            ./browserstackBitrise.sh
    - virtual-device-testing-for-android@1: {}
    - slack@3.1.3:
        run_if: '{{getenv "SLACK" | eq "yes"}}'
        inputs:
        - channel: "#android-capture-app-ci"
        - emoji: ":large_blue_circle:"
        - from_username: Specific UI test
        - buttons: 'View UITests|${BROWSERSTACK_TEST_REPORTS}

'
        - emoji_on_error: ":imp:"
        - from_username_on_error: Continuous integration
        - color_on_error: "#f01f33"
        - pretext: "*UI test result!*"
        - icon_url: https://d2ogrdw2mh0rsl.cloudfront.net/production/images/static/header/header-logo.svg
        - footer_icon: https://d2ogrdw2mh0rsl.cloudfront.net/production/images/static/header/header-logo.svg
        - footer: Browserstack
        - webhook_url: "$SLACK_CI_WEBHOOK"
    - cache-push@2.2.3: {}
  WebSettingsAppDeployment:
    description: |+
      Workflow that

      1)Choose random reviewers for a PR

      2)Run tests

      3)Publish Results on slack

    steps:
    - activate-ssh-key@4.0.5:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - script@1:
        title: Clone Settings Web App
        inputs:
        - content: |+
            #!/usr/bin/env bash
            set -e
            set -x

            # write your script here
            echo "Hello World!"

            git "init"
            git "remote" "add" "origin" "https://github.com/dhis2/android-settings-app.git"
            git "fetch" "origin" "refs/heads/master"
            git "checkout" "master"
            git "merge" "origin/master"
            pwd
            ls -la

    - cache-pull@2: {}
    - yarn@0:
        inputs:
        - args: install --frozen-lockfile
    - yarn@0:
        inputs:
        - args: build
    - apt-get-install@0:
        inputs:
        - packages: curl
    - script@1:
        title: Deploy to dhis2 server
        inputs:
        - content: |
            #!/bin/bash
            set -ex

            chmod +x deploy_settings_app.sh
            ./deploy_settings_app.sh
    - deploy-to-bitrise-io@1:
        inputs:
        - notify_email_list: "$APP_DEVS_MAILS"
        - notify_user_groups: none
    - cache-push@2: {}
