// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: 'dependencies.gradle'
    ext.kotlin_version = '1.8.10'
    repositories {
        google()
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
    dependencies {
        classpath libs.gradle.gradlePlugin
        classpath libs.gradle.kotlinPlugin
        classpath libs.gradle.hiltPlugin
        classpath libs.gradle.jacoco
        classpath libs.gradle.kotlinSerialization
    }
}

plugins {
    id "org.jlleitschuh.gradle.ktlint" version "11.3.2"
    id "org.sonarqube" version "3.5.0.2730"
    id "com.github.ben-manes.versions" version "0.46.0"
    id 'com.autonomousapps.dependency-analysis' version "1.19.0"
}

sonarqube {
    properties {
        def branch = System.getenv("BITRISE_GIT_BRANCH")
        def targetBranch = System.getenv("BITRISEIO_GIT_BRANCH_DEST")
        def pullRequestId = System.getenv("BITRISE_PULL_REQUEST")
        property "sonar.projectKey", "dhis2_dhis2-android-capture-app"
        property "sonar.organization", "dhis2"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectName", "android capture app"
        if (pullRequestId == null) {
            property "sonar.branch.name", branch
        } else {
            property "sonar.pullrequest.base", targetBranch
            property "sonar.pullrequest.branch", branch
            property "sonar.pullrequest.key", pullRequestId
        }
    }
}

dependencyAnalysis {
    issues {
        all {
            onUnusedDependencies {
                severity('fail')
            }
            onUsedTransitiveDependencies {
                severity('warn')
            }
            onIncorrectConfiguration {
                severity('fail')
            }
            onUnusedAnnotationProcessors {
                severity('fail')
            }
            onRedundantPlugins {
                severity('fail')
            }
            // Ignore ktx dependencies if a transitive dependency is used
            ignoreKtx(true)
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }
}

allprojects {
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion "0.8.8"
                }
            }
        }
    }
    apply plugin: 'jacoco'
    repositories {
        google()
        jcenter() {
            content {
                includeModule('de.adorsys.android', 'securestoragelibrary')
                //Only available version in jitpack is 0.0.2. We use 1.2.2
                includeModule('com.journeyapps', 'zxing-android-embedded')
                //Only works for API 24+ using Maven Repository, 19+ can be used but we have to downgrade zxing to 3.3.0
                includeGroup('co.infinum')
                //There is a problem with the library in mavenCentral, an issue has been created in the github repo
            }
        }
        mavenCentral()
        maven {
            url 'https://maven.google.com'
        }
        maven { url "https://jitpack.io" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven {
            url 'https://api.mapbox.com/downloads/v2/releases/maven'
            authentication {
                basic(BasicAuthentication)
            }
            def mapboxDownloadsToken = System.getenv("MAPBOX_DOWNLOADS_TOKEN") != null ? System.getenv("MAPBOX_DOWNLOADS_TOKEN") : project.properties['MAPBOX_DOWNLOADS_TOKEN']

            credentials {
                // This should always be `mapbox` (not your username).
                username = 'mapbox'
                password = mapboxDownloadsToken
            }
        }
    }

    apply plugin: "org.jlleitschuh.gradle.ktlint"

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "1000"
        }
    }

    ktlint {
        debug = true
        verbose = true
        android = true
        outputToConsole = true
        enableExperimentalRules = true
        filter {
            exclude { element -> element.file.path.contains("androidTest") }
            exclude { element -> element.file.path.contains("dhis2-android-sdk") }
        }
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}



