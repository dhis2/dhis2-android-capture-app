plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
}

apply plugin: "kotlinx-serialization"

def libraries = rootProject.ext.libraries
def versions = rootProject.ext.versions

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

android {
    compileSdk versions.sdk

    defaultConfig {
        minSdk versions.minSdk
        targetSdk versions.sdk
        versionCode versions.vCode
        versionName versions.vName
        applicationId versions.applicationId
        multiDexEnabled true

        setProperty("archivesBaseName", "psm-v" + versions.versionName)

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "dagger.hilt.disableCrossCompilationRootValidation": "true"
                ]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
            buildConfigField("String", "APPLICATION_ID", "\"${defaultConfig.applicationId}\"")
        }

        debug {
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
            buildConfigField("String", "APPLICATION_ID", "\"${defaultConfig.applicationId}\"")
        }


    }

    flavorDimensions "default"

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildFeatures {
        compose true
        viewBinding true
        dataBinding true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/gradle/incremental.annotation.processors'
    }

    composeOptions {
        kotlinCompilerExtensionVersion = versions.kotlinCompilerExtensionVersion
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

}

dependencies {

    implementation project(":commons")
    implementation project(":compose-table")

    implementation "androidx.activity:activity-compose:$libraries.compose"

    implementation "org.hisp.dhis.rules:rule-engine:$libraries.ruleEngine"

    implementation "androidx.annotation:annotation:$libraries.annotation"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$libraries.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$libraries.lifecycle"


    implementation "androidx.legacy:legacy-support-v4:$libraries.legacysupport"
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$libraries.desugar_jdk_libs"

    implementation "androidx.appcompat:appcompat:$libraries.appcompat"
    implementation "com.google.android.material:material:$libraries.material"
    implementation "androidx.constraintlayout:constraintlayout:$libraries.constraintlayout"

    implementation "io.reactivex.rxjava2:rxjava:$libraries.rxjava"
    implementation "com.jakewharton.rxrelay2:rxrelay:$libraries.rxrelay"

    // Security
    implementation "net.openid:appauth:$libraries.openid"

    // Preferences
    implementation "androidx.preference:preference-ktx:$libraries.preference_ktx"

    // WorkManager
    implementation "androidx.work:work-runtime:$libraries.work"
    implementation "androidx.work:work-runtime-ktx:$libraries.work"
    implementation "androidx.work:work-rxjava2:$libraries.work"
    implementation "androidx.work:work-gcm:$libraries.work"

    // Activity KTX for viewModels()
    implementation "androidx.activity:activity-ktx:$libraries.activityCompose"
    implementation "androidx.fragment:fragment-ktx:$libraries.fragmentCompose"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$libraries.viewModelCompose"

    // DI
    implementation "com.google.dagger:hilt-android:$libraries.hilt"
    kapt "com.google.dagger:hilt-compiler:$libraries.hilt"

    // Barcode scanner
    implementation "com.journeyapps:zxing-android-embedded:$libraries.zxingandroid"

    // Logging
    implementation "com.jakewharton.timber:timber:$libraries.timber"
    implementation "cat.ereza:customactivityoncrash:$libraries.crashactivity"

    debugImplementation "com.facebook.flipper:flipper:$libraries.flipper"
    debugImplementation "com.facebook.soloader:soloader:$libraries.soloader"
    debugImplementation("com.facebook.flipper:flipper-network-plugin:$libraries.flipper") {
        exclude group: 'com.squareup.okhttp3'
    }

    releaseImplementation "com.facebook.flipper:flipper-noop:$libraries.flipper"

    testImplementation "junit:junit:$libraries.junit"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$libraries.mockito"
    testImplementation "org.mockito:mockito-inline:$libraries.mockito_inline"
    testImplementation "androidx.arch.core:core-testing:$libraries.android_core_testing"
    testImplementation "com.github.javafaker:javafaker:$libraries.javafaker"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$libraries.coroutines_test"

    androidTestImplementation "androidx.test.ext:junit:$libraries.junit_ext"
    androidTestImplementation "androidx.test.espresso:espresso-core:$libraries.espresso_core"
    androidTestImplementation "androidx.arch.core:core-testing:$libraries.android_core_testing"

    //Serialization library
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${libraries.kotlinxserialization}"
}

kapt {
    correctErrorTypes true
}
